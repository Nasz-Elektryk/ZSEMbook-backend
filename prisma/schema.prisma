// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  FAQ
}

model User {
  id              Int              @id @default(autoincrement())
  name            String?
  username        String           @unique
  surname         String?
  class_name      String?
  passwordHash    String
  profileDesc     String
  avatar          Bytes?
  postsProjects   String
  profileSettings String
  loginID         Int?
  email           String           @unique
  restURL         RestURL?         @relation(fields: [restURLId], references: [id])
  restURLId       Int?
  certificate     String?
  fingerprint     String?
  privateKey      String?
  firebaseToken   String?
  spottedPost     SpottedPost[]
  project         Project[]
  report          Report[]
  isVerified      Boolean          @default(false)
  UnverifiedUser  UnverifiedUser[]
  GroupAdmin      GroupAdmin[]
  GroupMember     GroupMember[]
  GroupPost       GroupPost[]
  UserPost        UserPost[]
  SpottedLikes    SpottedLikes[]
  userSkills      UserSkils[]
  UserProject     UserProject[]
  facebook        String?
  instagram       String?
  youtube         String?
  website         String?
  darkTheme       Boolean          @default(false)
  Olympics        Olympics[]
  userId          Int? // WTF what is this, why is it here? will it break if i delete if?
  Comment         Comment[]
  Followers       Follows[]        @relation("follower")
  Following       Follows[]        @relation("following")
  role            Role             @default(USER)
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model UserSkils {
  id       Int          @id @default(autoincrement())
  userId   Int
  skillId  Int
  skillLvl enumSkillLvl
  user     User         @relation(fields: [userId], references: [id])
  skill    Skills       @relation(fields: [skillId], references: [id])
}

enum enumSkillLvl {
  beginner
  intermediate
  advanced
}

model Skills {
  id         Int         @id @default(autoincrement())
  name       String
  userSkills UserSkils[]
}

model UnverifiedUser {
  tempId String @id
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model RestURL {
  id    Int    @id @default(autoincrement())
  url   String @unique
  users User[] @relation()
}

model SpottedPost {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  title        String
  text         String
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int
  isAnonymous  Boolean
  Report       Report[]
  SpottedLikes SpottedLikes[]
  Comment      Comment[]
}

model SpottedLikes {
  id     Int         @id @default(autoincrement())
  post   SpottedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([userId, postId])
}

model Project {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  title       String
  text        String
  author      User          @relation(fields: [authorId], references: [id])
  authorId    Int
  Report      Report[]
  UserProject UserProject[]
}

model UserProject {
  id        Int      @id @default(autoincrement())
  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@unique([userId, projectId])
}

model Report {
  Id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  spottedPost   SpottedPost? @relation(fields: [spottedPostId], references: [id])
  spottedPostId Int?
  project       Project?     @relation(fields: [projectId], references: [id])
  projectId     Int?
  createdAt     DateTime     @default(now())
  reason        String
  GroupPost     GroupPost?   @relation(fields: [groupPostId], references: [id])
  groupPostId   Int?
  UserPost      UserPost?    @relation(fields: [userPostId], references: [id])
  userPostId    Int?
}

model Comment {
  id       Int         @id @default(autoincrement())
  text     String
  authorId Int
  user     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post     SpottedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  parent   Comment?    @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int?
  children Comment[]   @relation("ChildComments")
}

model Group {
  Id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  GroupAdmin  GroupAdmin[]
  GroupMember GroupMember[]
}

model GroupAdmin {
  Id      Int    @id @default(autoincrement())
  group   Group? @relation(fields: [groupId], references: [Id])
  groupId Int?
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

model GroupMember {
  Id      Int    @id @default(autoincrement())
  group   Group? @relation(fields: [groupId], references: [Id])
  groupId Int?
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

model GroupPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  Report    Report[]
}

model UserPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  Report    Report[]
}

model Olympics {
  id              Int      @id @default(autoincrement())
  registrationEnd DateTime
  startsAt        DateTime
  endsAt          DateTime
  title           String
  description     String
  prizePool       Int
  participants    User[]
  organisators    String[]
}
