generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  FAQ
}

model User {
  id             Int              @id @default(autoincrement())
  name           String?
  username       String           @unique
  surname        String?
  class_name     String?
  passwordHash   String
  profileDesc    String
  loginID        Int?
  email          String           @unique
  restURLId      Int?
  certificate    String?
  fingerprint    String?
  privateKey     String?
  firebaseToken  String?
  isVerified     Boolean          @default(false)
  avatar         Bytes?
  darkTheme      Boolean          @default(false)
  facebook       String?
  instagram      String?
  website        String?
  youtube        String?
  userId         Int?
  role           Role             @default(USER)
  Comment        Comment[]
  Followers      Follows[]        @relation("following")
  Following      Follows[]        @relation("follower")
  GroupAdmin     GroupAdmin[]
  GroupMember    GroupMember[]
  GroupPost      GroupPost[]
  report         Report[]
  SpottedComment SpottedComment[]
  SpottedLikes   SpottedLikes[]
  spottedPost    SpottedPost[]
  UnverifiedUser UnverifiedUser[]
  restURL        RestURL?         @relation(fields: [restURLId], references: [id])
  UserPost       UserPost[]
  userSkills     UserSkils[]
  Olympics       Olympics[]       @relation("OlympicsToUser")
  facebookId     String?          @unique
  Faq            Faq[]
}

model Follows {
  followerId  Int
  followingId Int
  follower    User @relation("follower", fields: [followerId], references: [id])
  following   User @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model UserSkils {
  id       Int          @id @default(autoincrement())
  skillId  Int
  userId   Int
  skillLvl enumSkillLvl
  skill    Skills       @relation(fields: [skillId], references: [id])
  user     User         @relation(fields: [userId], references: [id])
}

model Skills {
  id         Int         @id @default(autoincrement())
  name       String
  userSkills UserSkils[]
}

model UnverifiedUser {
  tempId String @id
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model RestURL {
  id    Int    @id @default(autoincrement())
  url   String @unique
  users User[]
}

model SpottedPost {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  title          String
  text           String
  authorId       Int
  isAnonymous    Boolean
  Comment        Comment[]
  Report         Report[]
  SpottedComment SpottedComment[]
  SpottedLikes   SpottedLikes[]
  author         User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model SpottedLikes {
  id     Int         @id @default(autoincrement())
  postId Int
  userId Int
  post   SpottedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}
model SchoolEvent {
  id          Int           @id @default(autoincrement())
  date   DateTime      @default(now())
  title       String
  text        String
}

model Report {
  Id            Int          @id @default(autoincrement())
  userId        Int
  createdAt     DateTime     @default(now())
  reason        String
  projectId     Int?
  spottedPostId Int?
  groupPostId   Int?
  userPostId    Int?
  GroupPost     GroupPost?   @relation(fields: [groupPostId], references: [id])
  spottedPost   SpottedPost? @relation(fields: [spottedPostId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  UserPost      UserPost?    @relation(fields: [userPostId], references: [id])
}

model Comment {
  id       Int         @id @default(autoincrement())
  text     String
  postId   Int
  parentId Int?
  authorId Int
  user     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?    @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[]   @relation("ChildComments")
  post     SpottedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Group {
  Id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  GroupAdmin  GroupAdmin[]
  GroupMember GroupMember[]
}

model GroupAdmin {
  Id      Int    @id @default(autoincrement())
  groupId Int?
  userId  Int
  group   Group? @relation(fields: [groupId], references: [Id])
  user    User   @relation(fields: [userId], references: [id])
}

model GroupMember {
  Id      Int    @id @default(autoincrement())
  groupId Int?
  userId  Int
  group   Group? @relation(fields: [groupId], references: [Id])
  user    User   @relation(fields: [userId], references: [id])
}

model GroupPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  text      String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  Report    Report[]
}

model UserPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  text      String
  authorId  Int
  Report    Report[]
  author    User     @relation(fields: [authorId], references: [id])
}

model Olympics {
  id              Int      @id @default(autoincrement())
  registrationEnd DateTime
  startsAt        DateTime
  endsAt          DateTime
  title           String
  description     String
  prizePool       Int
  organisators    String[]
  participants    User[]   @relation("OlympicsToUser")
}

model SpottedComment {
  Id            Int          @id @default(autoincrement())
  userId        Int
  spottedPostId Int?
  createdAt     DateTime     @default(now())
  SpottedPost   SpottedPost? @relation(fields: [spottedPostId], references: [id])
  User          User         @relation(fields: [userId], references: [id])
}

model Faq {
  id         Int     @id @default(autoincrement())
  question   String
  answer     String?
  isAnswered Boolean @default(false)
  askerId    Int
  hierarchy  Int     @default(0)
  asker      User    @relation(fields: [askerId], references: [id])
}

enum enumSkillLvl {
  beginner
  intermediate
  advanced
}
